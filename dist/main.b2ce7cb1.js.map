{"version":3,"sources":["src/ts/main.ts"],"names":[],"mappings":";AAuEA,IAAA,EAAA,MAAA,KAAA,gBAAA,WAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,UAAA,OAAA,EAAA,EAAA,IAAA,GAAA,UAAA,GAAA,OAAA,IAAA,EAAA,MAAA,GAAA,EAAA,EAAA,IAAA,EAAA,EAAA,EAAA,EAAA,IAAA,IAAA,IAAA,EAAA,UAAA,GAAA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,EAAA,IAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,GAvEM,EAAM,SAAS,cAAc,QAC7B,EAAU,SAAC,EAAY,EAAqB,GAChD,MAAA,0BAA0B,EAAE,aACzB,EAAa,OAAS,KAAO,EAAY,OAAS,IAAG,QAGpD,EAAS,SAAC,GACd,MAAA,wBAAwB,EAAU,2BAEhC,EAAO,QACX,GAAQ,EAAO,gBACf,IAAK,IAAI,EAAI,EAAG,EAAI,EAAG,IACrB,GAAQ,EAAO,cAEjB,GAAQ,SAER,IAAS,EAAI,EAAG,EAAI,EAAG,IAAK,CAC1B,GAAQ,QACR,GAAQ,EAAO,cACV,IAAA,IAAI,EAAI,EAAG,EAAI,EAAG,IACrB,GAAQ,EAAW,EAAC,IAAI,EAAK,EAAI,GAAM,EAAG,EAAI,GAAM,GAEtD,GAAQ,SAGV,GAAQ,8BAER,EAAI,WAAa,EAQjB,IAAM,EAAU,SAAC,GAEV,IADC,IAAA,EAAmB,GAChB,EAAI,EAAG,EAAI,EAAQ,OAAQ,IAAK,CACjC,IAAA,EAAS,EAAQ,GACf,EAAQ,EAAM,IAChB,EAAQ,EAAO,OAAS,EAC9B,EAAK,aAAgB,MAAQ,EAAK,GAAK,KAAK,GAAU,EAAK,GAAO,CAAC,GAE9D,OAAA,GAGH,EAAU,SAAC,GAEV,IADC,IAAA,EAAmB,GAChB,EAAI,EAAG,EAAI,EAAQ,OAAQ,IAAK,CACjC,IAAA,EAAS,EAAQ,GACf,EAAQ,EAAM,IAChB,EAAQ,EAAO,OAAS,EAC9B,EAAK,aAAgB,MAAQ,EAAK,GAAK,KAAK,GAAU,EAAK,GAAO,CAAC,GAE9D,OAAA,GAGH,EAAc,SAAC,GACb,IAAA,EAAW,EAAI,QAAQ,GACvB,EAAY,EAAI,QAAQ,GACxB,EACJ,EAAW,EACP,EAAI,MAAM,EAAW,EAAG,GACxB,EAAI,MAAM,EAAY,EAAG,GAC3B,IACK,OAAA,EAAc,OAAO,SAAC,EAAK,GAAQ,OAAA,EAAM,IAChD,MAAO,GACA,OAAA,IAIX,SAAS,cAAc,OAAO,iBAAiB,QAAS,WAEhD,IAAA,EAAqB,EAAI,SAAS,iBAAiB,UAAU,IACjE,SAAA,GACU,IAAA,EAAc,EAAK,MACrB,EADgB,EAAK,GACL,MAAM,KAArB,EAAG,EAAA,GAAE,EAAG,EAAA,GACR,MAAA,CACL,MAAO,SAAS,GAChB,IAAK,SAAS,GACd,IAAK,SAAS,MAOd,EADO,EAAQ,GACA,IAAI,SAAA,GAAO,OAAA,EAAY,KAGtC,EADO,EAAQ,GACA,IAAI,SAAA,GAAO,OAAA,EAAY,KAEtC,EAAa,EACd,SAAS,iBAAiB,uBAEzB,EAAa,EACd,SAAS,iBAAiB,uBAE/B,QAAQ,IAAI,CAAE,WAAU,EAAE,WAAU,IAC/B,IAAA,IAAI,EAAI,EAAG,EAAI,EAAQ,OAAQ,IAAK,CACjC,IAAA,EAAM,EAAQ,GACL,EAAW,GACnB,MAAQ,GAAG,EAEf,IAAI,EAAI,EAAG,EAAI,EAAQ,OAAQ,IAAK,CACjC,EAAM,EAAQ,GACL,EAAW,GACnB,MAAQ,GAAG,EAGnB,EACI,SAAS,iBAAiB,uBACN,QAAQ,SAAA,GAAU,OAAA,EAAM,MAAQ","file":"main.b2ce7cb1.js","sourceRoot":"..","sourcesContent":["const app = document.querySelector(\"#app\");\r\nconst inputEl = (id: string, leftBorder: boolean, topBorder: boolean) =>\r\n  `<input type=\"text\" id=\"${id}\" class=\"${\r\n    (leftBorder ? \"left\" : \"\") + (topBorder ? \" top\" : \"\")\r\n  }\" />`;\r\n\r\nconst output = (extraClass: string) =>\r\n  `<input class=\"output ${extraClass}\" value=\"0\" readonly />`;\r\n\r\nlet html = \"<div>\";\r\nhtml += output(\"blank-output\");\r\nfor (let i = 0; i < 9; i++) {\r\n  html += output(\"col-output\");\r\n}\r\nhtml += \"</div>\";\r\n\r\nfor (let i = 0; i < 9; i++) {\r\n  html += \"<div>\";\r\n  html += output(\"row-output\");\r\n  for (let j = 0; j < 9; j++) {\r\n    html += inputEl(`${i},${j}`, j % 3 === 0, i % 3 === 0);\r\n  }\r\n  html += \"</div>\";\r\n}\r\n\r\nhtml += '<button id=\"go\">Go</button>';\r\n\r\napp.innerHTML += html;\r\n\r\ninterface Number_ {\r\n  value: number;\r\n  row: number;\r\n  col: number;\r\n}\r\n\r\nconst getRows = (numbers: Number_[]) => {\r\n  const rows: number[][] = [];\r\n  for (let i = 0; i < numbers.length; i++) {\r\n    const number = numbers[i];\r\n    const { row } = number;\r\n    const value = number.value || 0;\r\n    rows[row] instanceof Array ? rows[row].push(value) : (rows[row] = [value]);\r\n  }\r\n  return rows;\r\n};\r\n\r\nconst getCols = (numbers: Number_[]) => {\r\n  const cols: number[][] = [];\r\n  for (let i = 0; i < numbers.length; i++) {\r\n    const number = numbers[i];\r\n    const { col } = number;\r\n    const value = number.value || 0;\r\n    cols[col] instanceof Array ? cols[col].push(value) : (cols[col] = [value]);\r\n  }\r\n  return cols;\r\n};\r\n\r\nconst sandwichSum = (arr: number[]) => {\r\n  const oneIndex = arr.indexOf(1);\r\n  const nineIndex = arr.indexOf(9);\r\n  const middleNumbers =\r\n    oneIndex < nineIndex\r\n      ? arr.slice(oneIndex + 1, nineIndex)\r\n      : arr.slice(nineIndex + 1, oneIndex);\r\n  try {\r\n    return middleNumbers.reduce((acc, val) => acc + val);\r\n  } catch (err) {\r\n    return 0;\r\n  }\r\n};\r\n\r\ndocument.querySelector(\"#go\").addEventListener(\"click\", () => {\r\n  // Collect data\r\n  const numbers: Number_[] = [...document.querySelectorAll(\"input\")].map(\r\n    input => {\r\n      const { value, id } = input;\r\n      const [row, col] = id.split(\",\");\r\n      return {\r\n        value: parseInt(value),\r\n        row: parseInt(row),\r\n        col: parseInt(col),\r\n      };\r\n    },\r\n  );\r\n\r\n  // Sum rows\r\n  const rows = getRows(numbers);\r\n  const rowSums = rows.map(row => sandwichSum(row));\r\n  // Sum cols\r\n  const cols = getCols(numbers);\r\n  const colSums = cols.map(col => sandwichSum(col));\r\n  // Display results\r\n  const rowOutputs = [\r\n    ...document.querySelectorAll(\".output.row-output\"),\r\n  ] as HTMLInputElement[];\r\n  const colOutputs = [\r\n    ...document.querySelectorAll(\".output.col-output\"),\r\n  ] as HTMLInputElement[];\r\n  console.log({ rowOutputs, colOutputs });\r\n  for (let i = 0; i < rowSums.length; i++) {\r\n    const sum = rowSums[i];\r\n    const output = rowOutputs[i];\r\n    output.value = `${sum}`;\r\n  }\r\n  for (let i = 0; i < colSums.length; i++) {\r\n    const sum = colSums[i];\r\n    const output = colOutputs[i];\r\n    output.value = `${sum}`;\r\n  }\r\n  // Clear inputs\r\n  ([\r\n    ...document.querySelectorAll(\"input:not(.output)\"),\r\n  ] as HTMLInputElement[]).forEach(input => (input.value = \"\"));\r\n});\r\n"]}